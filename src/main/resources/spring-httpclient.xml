<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"  
    xmlns:c="http://www.springframework.org/schema/c" xmlns:cache="http://www.springframework.org/schema/cache"  
    xmlns:context="http://www.springframework.org/schema/context"  
    xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:jee="http://www.springframework.org/schema/jee"  
    xmlns:lang="http://www.springframework.org/schema/lang" xmlns:mvc="http://www.springframework.org/schema/mvc"  
    xmlns:p="http://www.springframework.org/schema/p" xmlns:task="http://www.springframework.org/schema/task"  
    xmlns:tx="http://www.springframework.org/schema/tx" xmlns:util="http://www.springframework.org/schema/util"  
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd  
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd  
        http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd  
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd  
        http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd  
        http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd  
        http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang.xsd  
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd  
        http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd  
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd  
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">    
    
  
<!--   
   <bean  
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
        允许JVM参数覆盖  
        <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />  
        忽略没有找到的资源文件  
        <property name="ignoreResourceNotFound" value="true" />  
        配置资源文件  
        <property name="locations">  
            <list>  
                <value>classpath:httpclient.properties</value>  
            </list>  
        </property>  
    </bean>  
   -->
  
  	<!-- 自动扫描 -->
	<context:component-scan base-package="com.way.utils.http" />
  
  
  
    <!--创建httpclient的连接池 -->  
    <bean id="httpClientConnectionManager"  
        class="org.apache.http.impl.conn.PoolingHttpClientConnectionManager"  
        destroy-method="shutdown">  
        <!-- 设置最大连接数 -->  
        <property name="maxTotal" value="${http.maxTotal}" />  
        <!-- 设置每个主机的并发数 -->  
        <property name="defaultMaxPerRoute" value="${http.defaultMaxPerRoute}" />  
    </bean>  
  
    <!-- 创建httpClient对象 -->  
    <!-- httpClient是由HttpClientBuilder通过build方法创建，这个可以设置连接池 -->  
    <!-- 1.创建HttpClientBuilder -->  
    <bean id="httpClientBuilder" class="org.apache.http.impl.client.HttpClientBuilder">  
        <!--设置连接池 -->  
        <property name="connectionManager" ref="httpClientConnectionManager"></property>  
    </bean>  
    <!-- 2.创建httpClient -->  
    <!-- 通过httpClientBulider得到httpClient对象，并且设置httpClient为多利模式 -->  
    <!-- 要保证httpClient为多利，以为每次都是新的http请求 -->  
    <bean id="httpClient" class="org.apache.http.impl.client.CloseableHttpClient"  
        factory-bean="httpClientBuilder" factory-method="build" scope="prototype" />  
  
    <!-- 构造请求参数 -->  
    <bean id="requestConfigBuilder" class="org.apache.http.client.config.RequestConfig.Builder">  
        <!-- 创建连接的最长时间 -->  
        <property name="connectTimeout" value="${http.connectTimeout}" />  
        <!-- 从连接池中获取到连接的最长时间 -->  
        <property name="connectionRequestTimeout" value="${http.connectionRequestTimeout}" />  
        <!-- 数据传输的最长时间 -->  
        <property name="socketTimeout" value="${http.socketTimeout}" />  
        <!-- 提交请求前测试连接是否可用 -->  
        <property name="staleConnectionCheckEnabled" value="${http.staleConnectionCheckEnabled}" />  
        

        
    </bean>  
   

    
    
    
    
    <bean id="requestConfig" class="org.apache.http.client.config.RequestConfig"  
        factory-bean="requestConfigBuilder" factory-method="build" />  
  
  
    <!--清理无效的http连接 -->  
    <bean class="com.way.utils.http.IdleConnectionEvictor"  
        destroy-method="shutdown">  
        <constructor-arg index="0" ref="httpClientConnectionManager"></constructor-arg>  
    </bean>  
</beans>